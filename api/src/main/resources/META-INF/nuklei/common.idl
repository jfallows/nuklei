/*
 * Copyright 2007-2016, Kaazing Corporation. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
scope common
{
    scope control
    {
        struct Frame
        {
            int64 correlationId;
        }

        struct Error extends common::control::Frame [0x40000000]
        {
        }


        struct Bind extends common::control::Frame [0x00000001]
        {
        }

        struct Bound extends common::control::Frame [0x40000001]
        {
            int64 referenceId;
        }

        struct Unbind extends common::control::Frame [0x00000002]
        {
            int64 referenceId;
        }

        struct Unbound extends common::control::Frame [0x40000002]
        {
            int64 referenceId;
        }

        struct Prepare extends common::control::Frame [0x00000003]
        {
        }

        struct Prepared extends common::control::Frame [0x40000003]
        {
            int64 referenceId;
        }

        struct Unprepare extends common::control::Frame [0x00000004]
        {
            int64 referenceId;
        }

        struct Unprepared extends common::control::Frame [0x40000004]
        {
            int64 referenceId;
        }


        struct Route extends common::control::Frame [0x00000011]
        {
            string source;
            int64 sourceRef;
            string target;
            int64 targetRef;
            string reply;
        }

        struct Routed extends common::control::Frame [0x40000011]
        {
            string source;
            int64 sourceRef;
            string target;
            int64 targetRef;
            string reply;
        }

        struct Unroute extends common::control::Frame [0x00000012]
        {
            string source;
            int64 sourceRef;
            string target;
            int64 targetRef;
            string reply;
        }

        struct Unrouted extends common::control::Frame [0x40000012]
        {
            string source;
            int64 sourceRef;
            string target;
            int64 targetRef;
            string reply;
        }


        struct Connect extends common::control::Frame [0x00000021]
        {
            int64 referenceId;
        }

        struct Connected extends common::control::Frame [0x40000021]
        {
            int64 streamId;
        }
    }

    scope stream
    {
        struct Frame
        {
            int64 streamId;
        }

        struct Begin extends common::stream::Frame [0x00000001]
        {
            int64 routableRef;
            int64 replyId;
            int64 replyRef;
        }

        struct Data extends common::stream::Frame [0x00000002]
        {
            octets payload;
        }

        struct End extends common::stream::Frame [0x00000003]
        {
        }

        struct Reset extends common::stream::Frame [0x40000001]
        {
        }

        struct Window extends common::stream::Frame [0x40000002]
        {
            int32 update;
        }
    }
}
